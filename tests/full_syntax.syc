require "and3"

circuit ha
  input  a,b # implicit type 'bit'
  output s,c
  s = a xor b
  c = a and b
end

circuit fa
  input  a,b,ci
  output s,co
  sig s1,c1
  s1,c1 = ha(a,b)      # positional mapping
  s ,c2 = ha(ci,s1)
  co    = c1 or c2
end

circuit rca{N,M}       # integer parameterized circuit
  input a,b : uint{N}  # parameterized type
  input d   : uint{M}  # parameterized type
  output s  : uint{?}  # please infer
end


circuit test_1
  input  a,e   : bit
  input  b     : uint8
  output c     : int3[4]
  output d     : int23

  sig s1,s2,s3 : bit
  sig s4       : byte  # equiv uint8
  sig s5       : sbyte # -128 to 127, equiv int8
  sig s6,s7    : bit

  s1       = a and reg(e)        # reg syntax (init with reg(e,0))
  s2       = s1 or e$(0)         # alternative reg syntax, with e init at 0
  s3       = !b[0] xor s2$$$(0)  # alternative not, bit access, 3 pipes using $
  d[21..0] = {resize(0x7,15),b}  # concat + resizing 
  d[22]    = and3(s1,s2,s3)      # positional arguments call
  s6,s7    = ha(a,e)             # positional circuit returns
  s4       = b*2                 # hummm result will be on size(b)+1
                                 # +,-,*,/,rem,mod
end

circuit and3
  input a,b,c : bit
  output s    : bit
  s = a and b and c
end

circuit big_pipe
  input a,b,c,d
  output f1,f2

  sig e,f,g,h

  # this syntax may be usefull during static scheduling transformations
  {
    e = a or b
    f = a and b
  }
  $ #---step----
  {
     g = a and e
     h = b and f
  }
  $ #---step----
  {
    f1 = g and h
    f2 = a and g
  }

end
