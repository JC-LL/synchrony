
circuit test_1
  input  a,e   : bit
  input  b     : uint8
  output c     : int3[4]
  output d     : int23

  sig s1,s2,s3 : bit
  sig s4       : byte  # equiv uint8
  sig s5       : sbyte # -128 to 127, equiv int8
  sig s6,s7    : bit

  s1       = a and reg(e)          # reg syntax (init with reg(e,0))
  s2       = s1 or e$(0)           # alternative reg syntax, with e init at 0
  s3       = !b[0] xor s2 $$$ (0)  # alternative not, bit access, 3 pipes using $
  d[21..0] = resize(0x7,15) _ b    # resizing followed by concatenation
  d[22]    = and3(s1,s2,s3)        # positional arguments call
  s6,s7    = ha(a,e)               # positional circuit returns
  s4       = b*2                   # hummm result will be on size(b)+1
                                   # +,-,*,/,rem,mod
  s8       = (a==1) ? a : e        # ternary
end
